frameworkVersion: '>=1.0.0 <2.0.0'

service: ${self:custom.helloRetail.name}-product-catalog-builder

custom:
  stage: ${opt:stage, self:provider.stage, self:custom.private.stage}
  private: ${file(../../private.yml)}
  helloRetail: ${file(../../helloRetail.yml)}
  retailStreamVersion: 1
  retailStream: ${file(../../retail-stream/serverless.yml)}
  # Product Catalog Versions & Exports
  # WARNING: each project that uses these will have to define the following two attributes (custom.productCatalogBuilderVersion, custom.productCatalogBuilder) in its serverless.yml:
  productCatalogBuilderVersion: 1 # The version of this service to depend upon
  productCatalogBuilder: ${self:} # externally, use `${file(~/product-catalog/serverless.yml)}`, replacing the `~` therein with the appropriate relative reference [e.g. '..' or '../..']
  # Exports
  exportProductCategoryTableName: ${self:custom.productCatalogBuilder.service}:${self:custom.stage}:ProductCategoryTableName:${self:custom.productCatalogBuilderVersion}
  exportProductCategoryTableArn: ${self:custom.productCatalogBuilder.service}:${self:custom.stage}:ProductCategoryTableArn:${self:custom.productCatalogBuilderVersion}
  exportProductCatalogTableName: ${self:custom.productCatalogBuilder.service}:${self:custom.stage}:ProductCatalogTableName:${self:custom.productCatalogBuilderVersion}
  exportProductCatalogTableArn: ${self:custom.productCatalogBuilder.service}:${self:custom.stage}:ProductCatalogTableArn:${self:custom.productCatalogBuilderVersion}
  exportProductPhotosTableName: ${self:custom.productCatalogBuilder.service}:${self:custom.stage}:ProductPhotosTableName:${self:custom.productCatalogBuilderVersion}
  exportProductCatalogTableCategoryIndexArn: ${self:custom.productCatalogBuilder.service}:${self:custom.stage}:ProductCatalogTableCategoryIndexArn:${self:custom.productCatalogBuilderVersion}
  productCatalogTableName: 'productCatalogTable'
  productCategoryTableName: 'productCategoryTable'
  productPhotosTableName: 'productPhotosTable'
  productPriceTableName: 'productPriceTable'

provider:
  name: aws
  deploymentBucket: ${self:custom.helloRetail.deploymentBucket}
  runtime: nodejs6.10
  profile: ${self:custom.private.profile}
  region: ${self:custom.private.region}

functions:
  catalog:
    role:
      Fn::GetAtt: [ ProductCatalogBuilder, Arn ]
    handler: catalog.processKinesisEvent
    environment:
      TABLE_PRODUCT_CATEGORY_NAME: ${self:custom.productCategoryTableName}
      TABLE_PRODUCT_CATALOG_NAME: ${self:custom.productCatalogTableName}
      TABLE_PRODUCT_PHOTOS_NAME: ${self:custom.productPhotosTableName}
      TABLE_PRODUCT_PRICE_NAME: ${self:custom.productPriceTableName}
    events:
      - stream:
          arn: 'arn:aws:kinesis:${self:provider.region}:${self:custom.private.accountId}:stream/${self:custom.stage}RetailStream' # replace this with the below, once supported by Serverless
#            Fn::ImportValue: ${self:custom.retailStream.custom.exportRetailStreamArn}
          enabled: true
          startingPosition: TRIM_HORIZON

resources:
  Resources:
    # Log Group
    CatalogLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:custom.stage}-catalog
        RetentionInDays: 7
    # Product Catalog Roles
    ProductCatalogBuilder: # role for the Catalog (Maintaining) Lambda
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ${self:custom.stage}ProductCatalogBuilder${self:custom.productCatalogBuilderVersion}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                AWS: # role ARNs that are allowed to write to the Product Catalog
                  - 'arn:aws:iam::${self:custom.private.accountId}:role/${self:custom.private.teamRole}'
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: lambda.amazonaws.com
        ManagedPolicyArns:
          - ${self:custom.private.teamPolicy}
        Policies:
          - PolicyName: CreateAndWriteToLogStream
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogStream'
                  Resource:
                    Fn::GetAtt: [ CatalogLogGroup, Arn ]
                - Effect: Allow
                  Action:
                    - 'logs:PutLogEvents'
                  Resource:
                    Fn::Join:
                      - ':'
                      - - Fn::GetAtt: [ CatalogLogGroup, Arn ]
                        - '*'
          - PolicyName: ReadFromKinesis
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'kinesis:GetRecords'
                    - 'kinesis:GetShardIterator'
                    - 'kinesis:DescribeStream'
                    - 'kinesis:ListStreams'
                  Resource:
                    Fn::ImportValue: ${self:custom.retailStream.custom.exportRetailStreamArn}

  Outputs:
    ProductCategoryTableName:
      Description: The Name of the Product Category Table
      Value: ${self:custom.productCategoryTableName}
      Export:
        Name: ${self:custom.productCatalogBuilder.custom.exportProductCategoryTableName}
    ProductCatalogTableName:
      Description: The Name of the Product Catalog Table
      Value: ${self:custom.productCatalogTableName}
      Export:
        Name: ${self:custom.productCatalogBuilder.custom.exportProductCatalogTableName}
    ProductPhotosTableName:
      Description: The Name of the Product Photos Table
      Value: ${self:custom.productPhotosTableName}
      Export:
        Name: ${self:custom.productCatalogBuilder.custom.exportProductPhotosTableName}
